# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
- name: System.Debug
  value: false
- name: PesterVersion
  value: 4.10.1


parameters:
- name: armTemplatePaths
  type: object
  default:
  - subscription.json
  - networking/hub-region.v0.json
  - networking/hub-region.v1.json
  - networking/hub-region.v2.json
  - networking/spoke-BU0001A0005-00.json
  - networking/spoke-BU0001A0005-01.json
  - cluster-stamp.json
  - cluster-stamp.v2.json

trigger:
  branches:
    include:
    - main

pool:
  vmImage: ubuntu-latest

stages:
- stage: ARMValidation
  condition: eq(false, true)
  displayName: ARM Asset Validation
  jobs:
  - job: armttk
    displayName: Run ARM TTK
    pool:
      vmImage: 'windows-latest'
    continueOnError: false
    timeoutInMinutes: 4
    steps:
    - task: PowerShell@2
      displayName: Download Test Runner Script
      inputs:
        targetType: inline
        script: |
          Invoke-RestMethod -Uri https://raw.githubusercontent.com/mspnp/samples/master/tests/Test.ARMTemplate.ps1 -OutFile (New-Item -Path "$env:PIPELINE_WORKSPACE\tests\Test.ARMTemplate.ps1" -Force)
    - task: PowerShell@2
      displayName: Install ARM TTK
      inputs:
        targetType: inline
        script: |
          git clone https://github.com/Azure/arm-ttk.git $env:PIPELINE_WORKSPACE\arm-ttk
    - task: PowerShell@2
      displayName: Install Pester
      inputs:
        targetType: inline
        script: |
          Install-Module Pester -AllowClobber -RequiredVersion $(PesterVersion) -Force -SkipPublisherCheck -AcceptLicense -Scope CurrentUser
          Import-Module Pester -RequiredVersion $(PesterVersion) -ErrorAction Stop
    - ${{ each armTemplatePath in parameters.armTemplatePaths }}:
      - task: PowerShell@2
        condition: always()
        displayName: Execute ARM TTK on ${{armTemplatePath}}
        inputs:
          targetType: inline
          script: |
            Import-Module $env:PIPELINE_WORKSPACE\arm-ttk\arm-ttk\arm-ttk.psd1 -ErrorAction Stop
            $results = Invoke-Pester -Script @{Path = "$env:PIPELINE_WORKSPACE\tests\Test.ARMTemplate.ps1"; Parameters = @{TemplatePath = "${{armTemplatePath}}"; Skip=""}} -OutputFormat NUnitXml -OutputFile $("{0}-ARMTemplate.xml" -f [System.IO.Path]::GetRandomFileName()) -PassThru
            if ($results.TestResult.Result -contains "Failed") {Write-Error -Message $("Test failed for {0}." -f $_)}
    - task: PublishTestResults@2
      condition: always()
      displayName: Publish ARM TTK Results
      inputs:
        testResultsFormat: NUnit
        mergeTestResults: true
        testResultsFiles: '*-ARMTemplate.xml'
- stage: DeploymentValidation
  condition: always()
  displayName: Deployment Validation
  jobs:
  - job: default
    continueOnError: false
    timeoutInMinutes: 4
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: AzureCLI@2
      condition: always()
      inputs:
        azureSubscription: 'Pnp Dev One (a012a8b0-522a-4f59-81b6-aa0361eb9387)'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az group create --name validation-mspnp-aks-baseline-regulated-$(Build.BuildId) --location centralus
          az deployment group validate -g validation-mspnp-aks-baseline-regulated-$(Build.BuildId) -f networking/hub-region.v0.json -p location=eastus2
          # az deployment group validate -g validation-mspnp-aks-baseline-regulated-$(Build.BuildId) -f networking/spoke-BU0001A0005-00.json -p location=eastus2 hubVnetResourceId='/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-enterprise-networking-hubs/providers/Microsoft.Network/virtualNetworks/vnet-eastus2-hub'
          # az deployment group validate -g validation-mspnp-aks-baseline-regulated-$(Build.BuildId) -f networking/hub-region.v1.json -p location=eastus2 aksImageBuilderSubnetResourceId='/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-enterprise-networking-spokes/providers/Microsoft.Network/virtualNetworks/vnet'
          # az deployment group validate -g validation-mspnp-aks-baseline-regulated-$(Build.BuildId) -f networking/spoke-BU0001A0005-01.json -p location=eastus2 hubVnetResourceId='/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-enterprise-networking-hubs/providers/Microsoft.Network/virtualNetworks/vnet-eastus2-hub'
          # az deployment group validate -g validation-mspnp-aks-baseline-regulated-$(Build.BuildId) -f networking/hub-region.v2.json -p location=eastus2 aksImageBuilderSubnetResourceId='/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-enterprise-networking-spokes/providers/Microsoft.Network/virtualNetworks/vnet' nodepoolSubnetResourceIds='[]' aksJumpboxSubnetResourceId='/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet/subnet'
          # az deployment group validate -g validation-mspnp-aks-baseline-regulated-$(Build.BuildId) -f cluster-stamp.json -p location=eastus2 targetVnetResourceId='/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet' clusterAdminAadGroupObjectId='' k8sControlPlaneAuthorizationTenantId='' appGatewayListenerCertificate='' aksIngressControllerCertificate='' jumpBoxImageResourceId='' jumpBoxCloudInitAsBase64=''
          # az deployment group validate -g validation-mspnp-aks-baseline-regulated-$(Build.BuildId) -f cluster-stamp.v2.json -p location=eastus2 targetVnetResourceId="/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet" clusterAdminAadGroupObjectId="" k8sControlPlaneAuthorizationTenantId="" appGatewayListenerCertificate="" aksIngressControllerCertificate="" jumpBoxImageResourceId="" jumpBoxCloudInitAsBase64=''
    - task: AzureCLI@2
      condition: always()
      inputs:
        azureSubscription: 'Pnp Dev One (a012a8b0-522a-4f59-81b6-aa0361eb9387)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az group delete --resource-group validation-mspnp-aks-baseline-regulated-$(Build.BuildId) --yes --no-wait