# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
- name: System.Debug
  value: true
- name: PesterVersion
  value: 4.10.1

trigger:
  branches:
    include:
    - main

pool:
  vmImage: ubuntu-latest

stages:
- stage: armTemplateToolkit
  jobs:
    - job: armttk
      pool:
        vmImage: 'windows-latest'
      continueOnError: false
      timeoutInMinutes: 4

      steps:
      - task: PowerShell@2
        displayName: Install ARM TTK
        inputs:
          targetType: 'inline'
          script: |
            Invoke-RestMethod -Uri https://raw.githubusercontent.com/mspnp/samples/master/tests/Test.ARMTemplate.ps1 -OutFile $env:PIPELINE_WORKSPACE\tests\Test.ARMTemplate.ps1
      - task: PowerShell@2
        displayName: Install ARM TTK
        inputs:
          targetType: 'inline'
          script: |
            git clone https://github.com/Azure/arm-ttk.git --quiet $env:PIPELINE_WORKSPACE\arm-ttk
            import-module $env:PIPELINE_WORKSPACE\arm-ttk\arm-ttk
      - task: PowerShell@2
        displayName: Install Pester
        inputs:
          targetType: 'inline'
          script: |
            Install-Module Pester -AllowClobber -RequiredVersion $(PesterVersion) -Force -SkipPublisherCheck -AcceptLicense -Scope CurrentUser
            Import-Module Pester -RequiredVersion $(PesterVersion) -ErrorAction Stop
          
      - task: PowerShell@2
        displayName: Execute ARM-TTK & Pester
        inputs:
          targetType: 'inline'
          script: |
            $results = Invoke-Pester -Script @{Path = "$env:PIPELINE_WORKSPACE\tests\Test.ARMTemplate.ps1"; Parameters = @{TemplatePath = "$(System.DefaultWorkingDirectory)\subscription.json"; Skip = "$(ttk-skip-test)"}} -OutputFormat NUnitXml -OutputFile TEST-ARMTemplate.xml -PassThru
            if ($results.TestResult.Result -contains "Failed") {Write-Error -Message "Test Failed"}
      
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'NUnit'
          testResultsFiles: TEST-ARMTemplate.xml
        condition: always()
